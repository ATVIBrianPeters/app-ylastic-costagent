#!/usr/bin/env perl
use strict;
use warnings;
package
  ylastic_costsagent;
# ABSTRACT: Gather AWS cost data for Ylastic

use File::Basename;
use Getopt::Lucid ':all';
use Log::Dispatchouli 2;
use App::Ylastic::CostsAgent;

my $opts = Getopt::Lucid->getopt([
  Param("dir|d"),
  Param("syslog|s"),
  Param("logpath|l"),
  Switch("dry-run|n"),
  Switch("debug"),
]);

my $cf = shift @ARGV
  or die "usage: $0 <config-file>\n";

local $ENV{DISPATCHOULI_PATH} = $opts->get_logpath
  if $opts->get_logpath;

my $logger = Log::Dispatchouli->new({
  ident     => basename($0),
  facility  => $opts->get_syslog ? $opts->get_syslog : undef,
  to_file   => $opts->get_logpath ? 1 : undef,
  log_pid   => 0,
  debug     => $opts->get_debug,
});

my $app = App::Ylastic::CostsAgent->new(
  config_file => $cf,
  logger      => $logger,
  dir         => $opts->get_dir,
  upload      => ! $opts->get_dry_run,
);

exit $app->run;

__END__

=for Pod::Coverage method_names_here

=begin wikidoc

= SYNOPSIS

  use App::Ylastic::CostsAgent;

= DESCRIPTION

This module might be cool, but you'd never know it from the lack
of documentation.

= USAGE

Good luck!

== Automation with cron

  # download raw usage data every 12 hours
  # PERL5LIB=... (if needed)
  PATH=/usr/local/bin:/usr/bin:/bin
  0 */12 * * * ylastic-costagent -C /etc/ylastic.config > /tmp/ylastic_aws_costs_agent.log 2>&1

= SEE ALSO

Maybe other modules do related things.

=end wikidoc

=cut

